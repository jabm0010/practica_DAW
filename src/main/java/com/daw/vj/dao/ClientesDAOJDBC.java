/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.daw.vj.dao;

import com.daw.vj.model.Cliente;
import com.daw.vj.model.Videojuego;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

/**
 *
 * @author Juan Béjar
 */
public class ClientesDAOJDBC implements ClienteDAO {

    private static final String[] autoField = {"id"}; //Autogenerated field for new records
    private static final String SQL_BUSCAID = "SELECT * FROM Cliente where id=?";
    private static final String SQL_REGISTRA = "INSERT INTO Cliente (nombre,correo,biografia,pwd,online) VALUES (?,?,?,?,?)";
    private static final String SQL_REGISTRAROL = "INSERT INTO Roles (correo,rol) VALUES (?,?)";
    private static final String SQL_BUSCAEMAIL = "SELECT * FROM Cliente where correo=?";
    private static final String SQL_BUSCATODOS = "SELECT * FROM Cliente";
    private static final String SQL_BUSCANOMBRE = "SELECT * FROM Cliente WHERE UPPER(nombre) LIKE ?";
    private static final String SQL_ACTUALIZA = "UPDATE Cliente set nombre=?, biografia=?, pwd=? WHERE id=?";
    private static final String SQL_BUSCAAMIGOS = "SELECT cli_id2 FROM cliente,cliente_cliente WHERE id=? AND id=cli_id1";

    private static final String connPoolName = "java:comp/env/jdbc/DAWpractica";
    private DataSource ds = null;

    public ClientesDAOJDBC() {
        if (ds == null) {
            try {
                Context context = new InitialContext();
                ds = (DataSource) context.lookup(connPoolName);
            } catch (NamingException ex) {
                Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }
    }

    /**
     * Recupera un Cliente del registro actual del RS (MAPPING)
     */
    private static Cliente clienteMapper(ResultSet rs) throws SQLException {
        Cliente c;
        c = new Cliente(rs.getInt("id"),
                rs.getString("nombre"),
                rs.getString("correo"),
                rs.getString("biografia"),
                rs.getString("pwd"),
                rs.getBoolean("online")
        );
        return c;
    }

    @Override
    public List<Cliente> buscaNombre(String nombre) {

        List<Cliente> clientes = new ArrayList<Cliente>();
        Cliente c = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCANOMBRE)) {
            stmn.setString(1, ("%" + nombre + "%").toUpperCase());
            try (ResultSet rs = stmn.executeQuery()) {
                while (rs.next()) {
                    clientes.add(clienteMapper(rs));
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(VideojuegosDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        return clientes;

    }

    @Override
    public boolean registrar(Cliente c) {

        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_REGISTRA, autoField);) {
            stmn.setString(1, c.getNombre());
            stmn.setString(2, c.getCorreo());
            stmn.setString(3, c.getBiografia());
            stmn.setString(4, c.getPwd());
            stmn.setBoolean(5, c.isOnline());

            stmn.executeUpdate();
            try (ResultSet rs = stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs != null && rs.next()) {
                    int nuevoId = rs.getInt(1); //RS has only one field with key value
                    c.setId(nuevoId);
                    result = true;
                }
            } catch (Exception ex) {
                Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        if (result) {
            //Si se ha podido introducir de forma correcta, introducir también en la tabla de roles con el rol usuario
            
            try (Connection conn = ds.getConnection();
                    PreparedStatement stmn = conn.prepareStatement(SQL_REGISTRAROL);) {
                stmn.setString(1, c.getCorreo());
                stmn.setString(2, "USUARIOS");

                stmn.executeUpdate();

            } catch (Exception ex) {
                Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }

        }

        return result;

    }


    @Override
    public boolean modificar(Cliente c) {
        return true;
    }

    @Override
    public boolean verificarCliente(String email, String pwd) {
        Cliente c = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAEMAIL)) {
            stmn.setString(1, email);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                c = clienteMapper(rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        if (c.getPwd().equals(pwd)) {
            return true;

        } else {
            return false;
        }

    }



    @Override
    public int obtenerID(String email) {
        Cliente c = null;
        int tmp = 0;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAEMAIL)) {
            stmn.setString(1, email);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                c = clienteMapper(rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(VideojuegosDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        if (c != null) {
            tmp = c.getId();
        }
        return tmp;

    }



    @Override
    public boolean guardaCliente(Cliente c) {
        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_ACTUALIZA);) {
            stmn.setString(1, c.getNombre());
            stmn.setString(2, c.getBiografia());
            stmn.setString(3, c.getPwd());

            stmn.setInt(4, c.getId());
            result = (stmn.executeUpdate() == 1);

        } catch (Exception ex) {
            Logger.getLogger(ClientesDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public Cliente buscaId(Integer id) {
        Cliente c = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1, id);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                c = clienteMapper(rs);

            }
        } catch (SQLException ex) {
            Logger.getLogger(VideojuegosDAOJDBC.class
                    .getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        return c;

    }

    @Override
    public List<Cliente> buscaTodos() {

        List<Cliente> l = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                Statement stmn = conn.createStatement();
                ResultSet rs = stmn.executeQuery(SQL_BUSCATODOS);) {
            while (rs.next()) {
                l.add(clienteMapper(rs));

            }
        } catch (Exception ex) {
            Logger.getLogger(ClientesDAOJDBC.class
                    .getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;

    }

    @Override
    public List<Cliente> buscaAmigos(int id) {

        List<Integer> l = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAAMIGOS)) {
            stmn.setInt(1, id);
            ResultSet rs = stmn.executeQuery();
            while (rs.next()) {
                l.add(rs.getInt("cli_id2"));

            }
        } catch (Exception ex) {
            Logger.getLogger(ClientesDAOJDBC.class
                    .getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }

        List<Cliente> amigos = new ArrayList<>();
        for (int i = 0; i < l.size(); i++) {
            Cliente c = new Cliente();
            c = buscaId(l.get(i));
            amigos.add(c);

        }

        return amigos;

    }

}
